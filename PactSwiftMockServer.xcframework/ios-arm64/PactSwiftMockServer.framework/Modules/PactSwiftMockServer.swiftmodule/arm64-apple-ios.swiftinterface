// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PactSwiftMockServer
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import PactSwiftMockServer
import Swift
import _Concurrency
import _StringProcessing
import os.log
import os
public enum ProviderVerificationError : Swift.Error, Swift.Equatable {
  case verificationFailed
  case nullPointer
  case methodPanicked
  case invalidArguments
  case usageError(Swift.String)
  case unknown
  public var description: Swift.String {
    get
  }
  public static func == (a: PactSwiftMockServer.ProviderVerificationError, b: PactSwiftMockServer.ProviderVerificationError) -> Swift.Bool
}
public enum MockServerError : Swift.Error {
  case invalidPactJSON
  case invalidSocketAddress
  case failedToStart
  case failedToWriteFile
  case methodPanicked
  case nullPointer
  case portNotFound
  case tlsConfigurationFailed
  case validationFaliure
  case unknown
  public var description: Swift.String {
    get
  }
  public static func == (a: PactSwiftMockServer.MockServerError, b: PactSwiftMockServer.MockServerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VerificationError : Swift.Error {
  case reason(Swift.String)
  public var description: Swift.String {
    get
  }
}
#if compiler(>=5.3) && $Actors
public actor MockServer {
  #if compiler(>=5.3) && $EffectfulProp
  public var baseUrl: Swift.String {
    get async
  }
  #endif
  public init(directory: Swift.String? = nil, transferProtocol: PactSwiftMockServer.TransferProtocol = .standard, merge: Swift.Bool = true)
  @objc deinit
  #if compiler(>=5.3) && $AsyncAwait
  public func setup(pact: Foundation.Data) async throws -> Swift.Int
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func verify() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func finalize(pact: Foundation.Data) async throws -> Swift.String
  #endif
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
#endif
#if compiler(>=5.3) && $Actors
extension PactSwiftMockServer.MockServer {
  nonisolated public static func generate_value(regex: Swift.String) -> Swift.String?
  nonisolated public static func generate_date(format: Swift.String) -> Swift.String?
}
#endif
public protocol ProviderVerifying {
  func verifyProvider(options args: Swift.String) -> Swift.Result<Swift.Bool, PactSwiftMockServer.ProviderVerificationError>
}
final public class Verifier : PactSwiftMockServer.ProviderVerifying {
  public init()
  final public func verifyProvider(options args: Swift.String) -> Swift.Result<Swift.Bool, PactSwiftMockServer.ProviderVerificationError>
  @objc deinit
}
public enum PactFileManager {
  public static var defaultPactDirectoryPath: Swift.String {
    get
  }
}
@objc public enum TransferProtocol : Swift.Int {
  case standard
  case secure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct StateHandler {
}
extension PactSwiftMockServer.MockServerError : Swift.Equatable {}
extension PactSwiftMockServer.MockServerError : Swift.Hashable {}
extension PactSwiftMockServer.TransferProtocol : Swift.Equatable {}
extension PactSwiftMockServer.TransferProtocol : Swift.Hashable {}
extension PactSwiftMockServer.TransferProtocol : Swift.RawRepresentable {}
