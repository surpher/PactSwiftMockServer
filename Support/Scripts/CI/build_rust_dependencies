#!/usr/bin/env bash
# shellcheck disable=SC1091

#  PactSwiftMockService
#
#  Created by Marko Justinek on 19/8/21.
#  Copyright © 2021 Marko Justinek. All rights reserved.
#  Permission to use, copy, modify, and/or distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
#  SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
#  IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

set -eu
set -o pipefail

SOURCE_DIR="${BASH_SOURCE[0]%/*}"

########################
#
# Pre-requisites:
# 	1. ``libpact_ffi.version`` file exists in the ${WORKSPACE} folder.
#
#######################

WORKSPACE="${GITHUB_WORKSPACE:-$PWD}"
LIBPACT_FFI_DIR="${WORKSPACE}/pact-reference/rust/pact_ffi"
LIBPACT_FFI_VERSION=$(awk 'NR==1 {print; exit}' libpact_ffi.version)
LOGS_DIR="${WORKSPACE}/.build"

# "import"
source "$SOURCE_DIR/../utils.sh"
source "$SOURCE_DIR/../Config/rust_config.sh"

#######################
# Pre-requisite
#######################

# Check whether this script is being run in the right folder
if [ ! -d "$PWD/PactSwiftMockServer.xcodeproj" ]
then
	echo "🚨 Run this from the same folder where your 'PactSwiftMockServer.xcodeproj' lives."
	echo "⚠️ You are runing it in $PWD"
	exit 1
fi

# Check Tooling is available
echo "👮‍♀️  Checking if Rust is installed..."
if which cargo >/dev/null; then
	echo "👍 cargo installed"
elif command -v ~/.cargo/bin/cargo &> /dev/null; then
	echo "👍 cargo installed in ~/.cargo/bin/"
else
	echo "🚨 Rust/Cargo not installed"
	echo -e "error: 'cargo' is a required dependency.\nInstall Rust using either homebrew or follow instructions at https://www.rust-lang.org/tools/install"
 	exit 1
fi

function log_build_environment {
  mkdir -p "$LOGS_DIR"
  local output_file="$1"
  {
    echo "-------------------------------------"
    echo "🔧 Build environment:"
    echo "-------------------------------------"
    echo "  rustc: $(rustc --version)"
    echo
    echo "  clang: $(clang --version)"
    echo
    echo "  cmake: $(cmake --version)"
    echo
    echo "  ld: $(ld -v)"
    echo
    echo "  SDK Version: $(xcrun --sdk macosx --show-sdk-path)"
    echo
    echo "  lipo: $(lipo -v)"
    echo
    echo "  Rust targets:"
    rustup target list | sed 's/^/\t/'
    echo
    echo "-------------------------------------"
  } >> "$output_file"
}

function log_binary_validation {
  mkdir -p "$LOGS_DIR"
  local output_file="$1"
  {
    echo "-------------------------------------"
    echo "🕵️‍♀️ Binary validation"
    echo "-------------------------------------"
    # echo "  iOS Device:"
    # lipo -info "$WORKSPACE"/Resources/iOS-device/libpact_ffi.a
    # echo
    echo "  iOS Simulator:"
    lipo -info "$WORKSPACE"/Resources/iOS-simulator/libpact_ffi.a
    echo
    echo "  Darwin:"
    lipo -info "$WORKSPACE"/Resources/darwin/libpact_ffi.a
    echo
    echo "-------------------------------------"
    echo "🧲 Listing symbols in binaries"
    echo "-------------------------------------"
    # echo " iOS Device:"
    # nm -C "$WORKSPACE"/Resources/iOS-device/libpact_ffi.a
    # echo
    echo " iOS Simulator:"
    nm -C "$WORKSPACE"/Resources/iOS-simulator/libpact_ffi.a
    echo
    echo " Darwin:"
    nm -C "$WORKSPACE"/Resources/darwin/libpact_ffi.a
    echo "-------------------------------------"
  } >> "$output_file"
}

# Print build environment
log_build_environment "$LOGS_DIR/build_environment.log"

####################################
# Rust codebase prep
####################################

# Update pact-reference submodule
echo "🔃 Updating pact-reference submodule"
executeCommand "git submodule update --remote --recursive"

echo "ℹ️ Changing location to ${LIBPACT_FFI_DIR}"
executeCommand "cd $LIBPACT_FFI_DIR"

echo "ℹ️ Checking out ${LIBPACT_FFI_VERSION}"
executeCommand "git fetch --all --tags"
executeCommand "git checkout tags/$LIBPACT_FFI_VERSION"

###############################
# Setup rust environment
###############################

# Set the rust toolchain (prepare_rust_tools.sh)
# pact-reference/rust/pact_ffi/CMakeLists.txt uses nightly!
rustup_installNightlyToolchain

# Set default rust toolchain for current machine's architecture
rustup_setDefaultToolchain

# Add the required triples for supported architectures
rustup_addTargets

##############################################
# Build libpact_ffi binaries
##############################################

# Set min deployment targets avoiding 'ld: warning's:
# avoiding "Object file (__/libpact_ffi.a[arm64][232](b0401a448be314bb-zdict.o)) was built for newer 'macOS' version (14.2) than being linked (12.0)"
unset MACOSX_DEPLOYMENT_TARGET
export MACOSX_DEPLOYMENT_TARGET=12.0

# avoiding "Object file (__/libpact_ffi.a[arm64][232](b0401a448be314bb-zdict.o)) was built for newer 'iOS-simulator' version (17.2) than being linked (13.0)"
unset IPHONEOS_DEPLOYMENT_TARGET
export IPHONEOS_DEPLOYMENT_TARGET=13.0

# Build for x86_64 architectures
echo "🏗 Building libpact_ffi.a for x86_64 iOS Simulator"
executeCommand "cargo build --target x86_64-apple-ios --release"

echo "🏗 Building libpact_ffi.a for x86_64 Darwin"
executeCommand "cargo build --target x86_64-apple-darwin --release"

# Build for arm64 architectures
echo "🏗 Building libpact_ffi.a for arm64 iOS Simulator"
executeCommand "cargo build --target aarch64-apple-ios-sim --release"

echo "🏗 Building libpact_ffi.a for arm64 Darwin"
executeCommand "cargo build --target aarch64-apple-darwin --release"

echo "🏗 Building libpact_ffi.a for arm64 iOS device"
executeCommand "cargo build --target aarch64-apple-ios --release"

echo -e "✅ ${GREEN}libpact_ffi.a binaries built$NOCOLOR"

echo "🏗 Building pact_ffi.h..."
executeCommand "mkdir -p build && cd build"

executeCommand "cmake .. && cmake --build ."
executeCommand "cbindgen .. -o ../include/pact_ffi.h"

executeCommand "cd .."

#######################
# Pact Mock Server
#######################

# Copy the compiled binaries into PactSwiftMockServer project
echo "🏗 Copying binaries from ${PWD} to ${WORKSPACE}/Resources"

# Copy binary for an iOS device
echo "🚚 Copying arm64-ios (iOS device) binary..."
executeCommand "cp ../target/aarch64-apple-ios/release/libpact_ffi.a \
  $WORKSPACE/Resources/iOS-device/libpact_ffi.a"
echo -e "${GREEN}👍  Copied arm64-ios binary.$NOCOLOR"

echo "warning: iOS device binary is not copied as it fails to build from Rust file..."

# Create a fat binary for iOS Simulators and copy to workspace
echo "🚚 Creating a fat binary for iOS Simulator (x86_64 and arm64)..."
executeCommand "lipo -create \
  ../target/x86_64-apple-ios/release/libpact_ffi.a \
  ../target/aarch64-apple-ios-sim/release/libpact_ffi.a \
  -output $WORKSPACE/Resources/iOS-simulator/libpact_ffi.a"
echo -e "${GREEN}👍 Copied x86_64-ios and arm64-ios-sim fattie.$NOCOLOR"

# Create a fat darwin binary and copy to workspace
echo "🚚 Copying darwin and arm64-darwin into a fat binary..."
executeCommand "lipo -create \
  ../target/x86_64-apple-darwin/release/libpact_ffi.a \
  ../target/aarch64-apple-darwin/release/libpact_ffi.a \
  -output $WORKSPACE/Resources/darwin/libpact_ffi.a"
echo -e "👍 ${GREEN}Copied darwin and arm64-darwin fattie.$NOCOLOR"

echo "🏗 Copying pact_ffi.h from ${PWD}/include to ${WORKSPACE}/Sources"
executeCommand "cp include/pact_ffi.h ${WORKSPACE}/Sources"

# Validate the binaries
# log_binary_validation "$LOGS_DIR/binary_validation.log"

#######################
# Cleanup
#######################

echo -e "📦 ${GREEN}libpact_ffi$NOCOLOR binaries built!"
