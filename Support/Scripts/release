#!/usr/bin/env bash
# shellcheck disable=SC1091

#  PactSwiftMockService
#
#  Created by Marko Justinek on 19/8/21.
#  Copyright ¬© 2021 Marko Justinek. All rights reserved.
#  Permission to use, copy, modify, and/or distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
#  SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
#  IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Runs the required steps to prepare and tag new version of PactSwift.
#
# Before you run this project make sure you commit the changes of the following scripts:
# 1. build_rust_dependencies
# 2. build_xcframework
#
# üö®üö®üö® WARNING üö®üö®üö®
# This is still a fragile script... because I just can't find decent time to DRY it up and set it up correctly.
# If you end up editing it, just be ready for a world of pain. Or not. Either way, you have been warned.
#

set -eu
set -o pipefail

function show_help {
  echo "Usage: $0 -v {major|minor|patch} [-d description] [--dry-run] [-i | --interactive] [--draft] [--pre-release]"
  echo
  echo "OPTIONS"
  echo "  -v, --version         Version number to bump. Possible values are 'major', 'minor' or 'patch'."
  echo "  -d, --description     Release description."
  echo "      --dry-run         Dry run won't tag or push the changes."
  echo "  -i, --interactive     Pauses after every step to allow for manual intervention."
  echo "      --draft           Creates a draft release."
  echo "      --pre-release     Creates a pre-release."
  echo
  echo "  -h, --help            Display this message"
  echo
  echo "Example: ./Support/release -v minor"
  echo
  exit 0
}


RELEASE_SOURCE_DIR="${BASH_SOURCE[0]%/*}"

if [ $# -lt 2 ]; then
  show_help
fi

# "import"
source "$RELEASE_SOURCE_DIR/utils.sh"
source "$RELEASE_SOURCE_DIR/CI/version_numbers.sh"
source "$RELEASE_SOURCE_DIR/Config/config.sh"

SHOULD_BUILD_RUST_BIN=${SHOULD_BUILD_RUST_BIN:-true}

DRY_RUN=false

CURRENT_BRANCH=$(git branch --show-current)
RELEASE_VERSION_PART=""
RELEASE_DESCRIPTION=""
LATEST_TAG=$(latest_tag)
CHANGE_LOG=${CHANGE_LOG:-}
REMOTE_NAME=${REMOTE_NAME:-}
SHOULD_PAUSE_SCRIPT_EXECUTION=false
RELEASE_OPTIONS=""

####################
# Utilities
####################

# Execute only if not dry run
function execute_cmd {
  local is_dry_run=$DRY_RUN
  if [ "$is_dry_run" = true ]; then
    echo -e "${CYAN}DRY RUN:$NOCOLOR $*"
  else
    executeCommand "$@"
  fi
}

function pause_execution_and_cleanup {
  local should_pause=$1
  #local command="git clean -fdx && git checkout $CURRENT_BRANCH && git reset --hard HEAD~1"
  if [ "$should_pause" = true ]; then
    # pause_execution "$command"
    pause_execution
  fi
}

function update_manifest_file_with_version_and_checksum {
    local package_file="$1"
    local new_version_url=
    local new_checksum=

    new_version_url=$(get_new_version_url "$VERSION_TAG")
    new_checksum=$(get_new_checksum)

    sed -i '' \
      -e "s|url: \".*\"|url: \"$new_version_url\"|" \
      -e "s|checksum: \".*\"|checksum: \"$new_checksum\"|" \
      "$package_file"
  }

function get_new_checksum {
  if [ -z "$NEW_VERSION_CHECKSUM" ]; then
    NEW_VERSION_CHECKSUM=$(swift package compute-checksum "$VERSIONED_XCFRAMEWORK_NAME.zip")
  fi
  echo "$NEW_VERSION_CHECKSUM"
}

function get_new_version_url {
  local version_tag=$VERSION_TAG

  # Replace "___VERSION_TAG___" with the value of $version_tag
  local new_version_url=${XCFRAMEWORK_URL_TEMPLATE//___VERSION_TAG___/$version_tag}
  echo "$new_version_url"
}

##################
# Git functions
##################

function git_checkout_new_release_candidate_branch {
  local release_version_branch="$1"
  echo -e "Checking out new branch $YELLOW$release_version_branch$NOCOLOR..."

  execute_cmd "git checkout -b \"$release_version_branch\""
}

function git_commit_changelog_and_xcconfig {
  local release_tag="${VERSION_TAG:-$1}"

  echo -e "ü©π Committing $YELLOW$CHANGE_LOG$NOCOLOR, $YELLOW$CONFIGURATION_FILE$NOCOLOR and ${YELLOW}Package.swift$NOCOLOR to git..."
  execute_cmd "git add \"$CHANGE_LOG\" \"$CONFIGURATION_FILE\" Package.swift"
  execute_cmd "git commit -m \"Release: $release_tag\" -S"
}

##################
# Submodules

function git_commit_changelog_to_xcframework_submodule {
  local changelog_file="CHANGELOG.md"
  local package_file="Package.swift"
  local version_tag=$VERSION_TAG

  {
    echo -e "üìù Copying ${YELLOW}$changelog_file$NOCOLOR to $YELLOW$SUBMODULE_XCFRAMEWORK$NOCOLOR submodule..."
    cp "$changelog_file" "$SUBMODULE_XCFRAMEWORK/$changelog_file"
    cd "$SUBMODULE_XCFRAMEWORK"

    # Update Package.swift with the new version and checksum
    update_manifest_file_with_version_and_checksum "$package_file"

    # Commit new changelog
    execute_cmd "git add \"$changelog_file\" \"$package_file\""
    execute_cmd "git commit -S -m \"Release: $version_tag\""

    while IFS= read -r package_swift; do
      echo "$package_swift"
    done < "$package_file"

    # Tag it
    execute_cmd "git tag -a \"$version_tag\" -m \"Release: $version_tag\""
    execute_cmd "git push origin main"
    execute_cmd "git push origin \"$version_tag\""
    execute_cmd "cd -"
  }
}

function git_update_main_repo_with_submodule_reference {
  local version_tag="$1"
  local version_branch="$2"

  execute_cmd "git add \"$SUBMODULE_XCFRAMEWORK\""
  execute_cmd "git commit -S -m \"Update submodule reference - $version_tag\""
  execute_cmd "git push --set-upstream origin \"$version_branch\""
}

##################
# GitHub functions
##################

function github_create_release_for {
  is_tool_installed gh "See https://cli.github.com/ for more information..."

  local release_tag="$1"
  local release_options="${2:-}"

  # shellcheck disable=SC2153
  local command="gh release create \"$release_tag\" --title \"$release_tag\" --notes-file $TAG_MESSAGE_FILE $release_options"
  execute_cmd "$command"

  # Give gh a second to catch up
  sleep 1

  local upload_assets="gh release upload \"$release_tag\" $VERSIONED_XCFRAMEWORK_NAME.zip $VERSIONED_XCFRAMEWORK_CHECKSUM --clobber --repo $REPO_OWNER/$RELEASE_REPO_NAME"
  execute_cmd "$upload_assets"
}

function github_create_pull_request_for_new_version {
  local version_tag="$1"
  local version_branch="$2"
  local pr_message="Release: [$version_tag](https://github.com/$REPO_OWNER/$RELEASE_REPO_NAME/releases/tag/$version_tag)"
  local dry_run=; dry_run=$([ "$DRY_RUN" = true ] && echo "--dry-run" || echo "")
  local open_pr_cmd="gh pr create --draft --base $PR_HEAD_BRANCH --head \"$version_branch\" $dry_run --title \"$version_tag\" --body \"$pr_message\" --repo $REPO_OWNER/$XCPRODUCT_NAME"

  echo "üóÉÔ∏è Opening a draft pull request..."
  execute_cmd "$open_pr_cmd"
}

####################
# File manipulation
####################

function update_version_file {
  local marketing_version="MARKETING_VERSION = $1"
  local config_file=$CONFIGURATION_FILE
  sed -i '' "2s/.*/$marketing_version/" "$config_file"
}

function update_pactswiftmockserver_changelog {
  echo "üìù Generating release notes in $CHANGE_LOG..."

  # Prepare the title for this release
  cat "$LIBPACT_FFI_VERSION_FILE" > "${TAG_MESSAGE_FILE}"
  echo >> "${TAG_MESSAGE_FILE}"

  # Get the commits from last contribution for tag message
  echo -e "ü™µ Git logging '${LATEST_TAG}..HEAD'..."
  git log --pretty='* %h - %s (%an)' "${LATEST_TAG}"..HEAD >> "${TAG_MESSAGE_FILE}"

  {
    echo -e "üßæ ${LIGHT_BLUE}Changes:$NOCOLOR"
    while IFS= read -r line; do
      echo "$line"
    done < "$TAG_MESSAGE_FILE"
  }

  # CHANGELOG.md for PactSwiftMockServer
  local release_notes_title=
  release_notes_title=$(head -n 1 "$CHANGE_LOG")

  local release_notes_existing=
  release_notes_existing=$(tail -n +2 "$CHANGE_LOG")

  # Inject the new commits between title and last release
  {
    echo "$release_notes_title"
    echo
    echo "## ${VERSION_TAG}"
    echo ""
    cat "${TAG_MESSAGE_FILE}"
    echo "$release_notes_existing"
  } > "$CHANGE_LOG"
}

function cleanup {
  local git_clean="git clean -fdx"
  local current_branch=$CURRENT_BRANCH
  local release_version_branch=$VERSION_BRANCH

  echo "üßπ Cleanning up..."
  execute_cmd "$git_clean"

  echo -e "‚èÆÔ∏è Checking out $YELLOW$current_branch$NOCOLOR..."
  git checkout --force "$current_branch"

  echo -e "üßπ Removing $YELLOW$release_version_branch$NOCOLOR..."
  git branch -D "$release_version_branch"

  echo -e "üöÆ Removing untracked files and directories..."
  execute_cmd "$git_clean"
}

##################
# Pre-checks
##################
while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--version)
            # Check if -v|--version is followed by a valid version type
            if [[ -z $2 || $2 =~ ^- ]]; then
                die "Error: Missing argument for '$2'."
            fi
            if [[ "$2" == "major" || "$2" == "minor" || "$2" == "patch" ]]; then
                RELEASE_VERSION_PART="$2"
                echo -e "üìà Bumping up $YELLOW$RELEASE_VERSION_PART$NOCOLOR version..."
                shift 2
            else
                echo -e "${RED}error:$NOCOLOR Invalid argument $YELLOW'$2'$NOCOLOR for $YELLOW'$1'$NOCOLOR."
                echo -e "       Must be either ${YELLOW}major$NOCOLOR, ${YELLOW}minor$NOCOLOR, or ${YELLOW}patch$NOCOLOR."
                exit 64
            fi
            ;;
        -d|--description)
            # Check if -d|--description is followed by a description value
            if [[ -z $2 || $2 =~ ^- ]]; then
                die "Error: Missing argument for $2"
            fi
            RELEASE_DESCRIPTION="$2"
            shift 2
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -i|--interactive)
            SHOULD_PAUSE_SCRIPT_EXECUTION=true
            shift
            ;;
        --draft)
            RELEASE_OPTIONS="$RELEASE_OPTIONS --draft"
            shift
            ;;
        --pre-release)
            RELEASE_OPTIONS="$RELEASE_OPTIONS --prerelease"
            shift
            ;;
        -h|--help)
            show_help
            ;;
        -*)
            die "Error: Unknown option $1"
            ;;
        *)
            die "Invalid option: $1"
            ;;
    esac
done

VERSION_TAG=$(generate_version_number "$RELEASE_VERSION_PART" "$RELEASE_DESCRIPTION")
VERSION_BRANCH="rc/${VERSION_TAG// /_}"
MARKETING_VERSION=${VERSION_TAG#v}
MARKETING_VERSION=${MARKETING_VERSION%% -*}
VERSIONED_XCFRAMEWORK_NAME="$XCFRAMEWORK_NAME-$VERSION_TAG.$XCFRAMEWORK_EXTENSION"
VERSIONED_XCFRAMEWORK_CHECKSUM="$XCFRAMEWORK_NAME-$VERSION_TAG.$XCFRAMEWORK_EXTENSION.$XCFRAMEWORK_CHECKSUM_EXTENSION"
NEW_VERSION_CHECKSUM=""

################################
# Prepare package for release
################################

# Bump up the MARKETING_VERSION in xcconfig so XCFramework uses the right version
echo -e "üëä Bumping up ${BLUE}MARKETING_VERSION$NOCOLOR in xcconfig to $YELLOW$MARKETING_VERSION$NOCOLOR..."
update_version_file "$MARKETING_VERSION"
pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION

# Generate release notes
echo -e "üìù Update changelog for ${LIGHT_BLUE}PactSwiftMockServer$NOCOLOR"
update_pactswiftmockserver_changelog
pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION

# Create a temporary branch for the release
echo -e "‚§¥Ô∏è Creating a new branch $YELLOW$VERSION_BRANCH$NOCOLOR..."
git_checkout_new_release_candidate_branch "$VERSION_BRANCH"
pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION

# Build libpact_ffi dependencies (if needed)
if [ "$SHOULD_BUILD_RUST_BIN" = true ]; then
  echo "üèóÔ∏è Building libpact_ffi binaries..."
  eval "$RELEASE_SOURCE_DIR/CI/build_rust_dependencies"
  pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION
fi

# Building the XCFramework
echo "üèóÔ∏è Building new XCFramework..."
eval "$RELEASE_SOURCE_DIR/CI/build_xcframework" "$VERSION_TAG"
pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION

# Create a checksum for the new XCFramework
echo "üîè Creating a checksum for the new XCFramework..."
NEW_VERSION_CHECKSUM=$(get_new_checksum)
pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION

# We have the references updated now now, commit changes to PactSwiftMockServer
echo "üíÆ Commit changelog and xcconfig..."
git_commit_changelog_and_xcconfig "$MARKETING_VERSION"
pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION

##################################
# XCFramework Submodule handling
##################################

# Copy CHANGELOG.md to the XCFramework submodule
echo -e "üßë‚Äçü§ù‚Äçüßë Copying ${YELLOW}CHANGELOG.md$NOCOLOR to $YELLOW$SUBMODULE_XCFRAMEWORK$NOCOLOR submodule..."
git_commit_changelog_to_xcframework_submodule "$VERSION_TAG" "$NEW_VERSION_CHECKSUM"
pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION

# Create a new release
echo -e "üöÄ Creating a new release for $YELLOW$VERSION_TAG$NOCOLOR..."
github_create_release_for "$VERSION_TAG" "$RELEASE_OPTIONS"
pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION

####################################
# Open a PR in main repository
####################################

# Update main repo with submodule reference
echo -e "üîÑ Updating main repo with submodule reference..."
git_update_main_repo_with_submodule_reference "$VERSION_TAG" "$VERSION_BRANCH"
pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION

# Create a pull request for the new version
echo -e "üì¶ Creating a pull request for $YELLOW$VERSION_TAG$NOCOLOR"
github_create_pull_request_for_new_version "$VERSION_TAG" "$VERSION_BRANCH"
pause_execution_and_cleanup $SHOULD_PAUSE_SCRIPT_EXECUTION

##################
# Cleanup
##################

if [ "$DRY_RUN" = true ]; then
  echo "üç∏ Dry run done..."
  read -r -p "Clean up what has been generated during dry run? [Y/n]" -n 1 USER_INPUT
  echo
  if [[ $USER_INPUT =~ ^[Yy]$ ]]; then
    cleanup
  else
    echo "üôå Leaving everything that's been generated during dry run as is..."
    exit 0
  fi
else
  cleanup
fi

echo -e "üèÅ ${GREEN}DONE$NOCOLOR!"
