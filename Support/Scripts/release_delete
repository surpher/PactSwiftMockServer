#!/usr/bin/env bash
# shellcheck disable=SC1091

set -eu

RELEASE_SOURCE_DIR="${BASH_SOURCE[0]%/*}"

# "import"
source "$RELEASE_SOURCE_DIR/utils.sh"
source "$RELEASE_SOURCE_DIR/Config/config.sh"

function show_help {
  echo "Deletes the release version of XCFramework with given tag"
  echo
  echo "Usage:"
  echo "  $0 { --tag | --release string } [-m | --message string] [--dry-run] [-h|--help]"
  echo
  echo "FLAGS"
  echo "  -t, --tag string        The release tag associated with release"
  echo "  -r, --release string    The release version associated with release (same as --tag)"
  echo "  -m, --message string    The message to be used for closing the pull request (if opened)"
  echo "      --dry-run           Prints the commands that would have been executed into stdout without executing them"
  echo "  -h, --help              Prints this message"
  exit 0
}

# Check if we can even do it...
is_tool_installed gh "See https://cli.github.com/ for more information..."

# Parameters
REVERT_DRY_RUN=${REVERT_DRY_RUN:-false}
TO_DELETE_TAG=
REASON_MSG=

if [ "$#" -eq 0 ]; then
    die "Invalid number of arguments. Use '--help' for more information."
fi

# Script inputs
while [[ $# -gt 0 ]]; do
  case "$1" in
    -t|--tag|-r|--release)
      TO_DELETE_TAG=$2
      shift 2
      ;;
    -m|--message)
      REASON_MSG=$2
      shift 2
      ;;
    --dry-run)
      REVERT_DRY_RUN=true
      shift
      ;;
    -h|--help)
      show_help
      ;;
    *)
      echo "Invalid option: $1" >&2
      show_help
      ;;
  esac
done

##########################
# Utility funcs
##########################

# Execute command depending on dry run option
function execute_cmd {
  local is_dry_run=$REVERT_DRY_RUN
  if [ "$is_dry_run" = true ]; then
    echo -e "${CYAN}DRY RUN:$NOCOLOR $*"
  else
    executeCommand "$@"
  fi
}

# Close the pull request and delete the associated branch
function github_delete_release_version {
  local tag_to_delete="$1"
  execute_cmd "gh release delete $tag_to_delete --cleanup-tag --yes --repo $REPO_OWNER/$RELEASE_REPO_NAME"
}

# Close the pull request and delete the associated branch
function close_pr_for_version {
  local version_number="$1"
  local pr_number=
  local gh_search_pr=
  local pact_swift_mock_server_repo=$XCPRODUCT_NAME

  gh_search_pr="gh search prs --match title \"$version_number\" --repo \"$REPO_OWNER/$pact_swift_mock_server_repo\" --jq '.[].number' --json number"
  echo -e "ü§ñ Executing:"
  echo -e "   $gh_search_pr"

  pr_number=$(eval "$gh_search_pr")
  execute_cmd "gh pr close $pr_number --delete-branch --comment \"${REASON_MSG:-"Reverted..."}\" --repo $REPO_OWNER/$pact_swift_mock_server_repo"
}

function is_branch_in_local {
  local branch=$1
  local exists_in_local=
  exists_in_local=$(git branch --list "$branch")

  if [[ -z "$exists_in_local" ]]; then
      return 1 # exists
  else
      return 0 # does not exist
  fi
}

function is_branch_on_remote {
  local branch=$1
  local exists_on_remote=
  exists_on_remote=$(git ls-remote --heads origin "$branch")

  if [[ -z "$exists_on_remote" ]]; then
      return 1 # exists
  else
      return 0 # does not exist
  fi
}

# Remove local branch
function delete_branch_for_tag {
  local local_branch="rc/$1"

  # Remove branch locally
  if is_branch_in_local "$local_branch"; then
    execute_cmd "git branch -D $local_branch"
    echo -e "üå¥ Branch $YELLOW$local_branch$NOCOLOR exists locally..."
    if [ "$REVERT_DRY_RUN" = true ]; then
      echo -e "üßπ Branch $YELLOW$local_branch$NOCOLOR would be force deleted locally."
    else
      echo -e "üßπ Branch $YELLOW$local_branch$NOCOLOR deleted."
    fi
  else
      echo -e "ü§∑‚Äç‚ôÇÔ∏è Branch $YELLOW$local_branch$NOCOLOR ${RED}does not$NOCOLOR exist locally..."
  fi

  # Remove branch from origin
  if is_branch_on_remote "$local_branch"; then
    echo -e "üèùÔ∏è Branch $YELLOW$local_branch$NOCOLOR exists on remote..."
    execute_cmd "git push origin --delete $local_branch"
    if [ "$REVERT_DRY_RUN" = true ]; then
      echo -e "üßπ Branch $YELLOW$local_branch$NOCOLOR would be deleted at origin."
    else
      echo -e "üßπ Branch $YELLOW$local_branch$NOCOLOR deleted at origin."
    fi
  else
    echo -e "ü§∑‚Äç‚ôÇÔ∏è Branch $YELLOW$local_branch$NOCOLOR ${RED}does not$NOCOLOR exist at origin..."
  fi
}

# Remove the tag
# Tag on PactSwiftServer does not exist until PR is merged and GHA tags the release commit.
function remove_asssociated_tags {
  local tag_to_delete="$1"

  echo -e "üöÆ Removing tags..."

  local remote_tags
  remote_tags=$(git ls-remote --tags origin | grep "refs/tags/$tag_to_delete")
  local local_tags
  local_tags=$(git tag --list | grep "$tag_to_delete")

  if [[ -n "$remote_tags" ]]; then
    echo -e "  remote tag: $YELLOW$tag_to_delete$NOCOLOR"
    echo -e "Tag $YELLOW$tag_to_delete$NOCOLOR exists at origin. Deleting..."
    execute_cmd "git push --delete origin $tag_to_delete"

    if [ "$REVERT_DRY_RUN" = true ]; then
      echo -e "${CYAN}DRY RUN:$NOCOLOR Tag $YELLOW$tag_to_delete$NOCOLOR would be deleted at origin."
    else
      echo "Tag '$tag_to_delete' deleted at origin."
    fi
  else
    echo -e "Tag $YELLOW$tag_to_delete$NOCOLOR not found at origin."
  fi

  if [[ -n "$local_tags" ]]; then
    echo -e "  local tags: $YELLOW$local_tags$NOCOLOR"
    for tag in $local_tags; do
      execute_cmd "git tag -d \"$tag\""
      if [ $? -ne 0 ]; then
        die "Failed to delete tag '$tag'."
      fi
      if [ "$REVERT_DRY_RUN" = true ]; then
        echo -e "${CYAN}DRY RUN:$NOCOLOR Tag $LIGHT_BLUE$tag would be deleted$NOCOLOR"
      else
        echo "Deleted tag '$tag'"
      fi
    done
  else
      echo "No tags found matching '#$tag_to_delete'"
  fi
}

# Reset the last commit here to revert the updated CHANGELOG
function git_reset_last_commit {
  local reset_type="hard"
  local value=$1

  if [[ "$value" == "soft" ]]; then
      reset_type="soft"
  elif [[ "$value" == "hard" ]]; then
      reset_type="hard"
  else
      die "Invalid value. Use either 'soft' or 'hard'."
  fi

  execute_cmd "git reset --$reset_type HEAD~1"
}

###################
# Script execution
###################

# Deleting the release
echo -e "üî• Deleting release $YELLOW$TO_DELETE_TAG$NOCOLOR..."
github_delete_release_version "$TO_DELETE_TAG"

echo "---------"

# Closing the pull request
echo -e "üö™ Closing pull request $YELLOW#$TO_DELETE_TAG$NOCOLOR..."
close_pr_for_version "$TO_DELETE_TAG"

echo "---------"

# Removing tags
echo -e "üí• Removing tags associated with $YELLOW$TO_DELETE_TAG$NOCOLOR..."
remove_asssociated_tags "$TO_DELETE_TAG"

echo "---------"

# Deleting branch associated with the release
echo -e "üßπ Deleting branch associated with ${YELLOW}pr/$TO_DELETE_TAG$NOCOLOR..."
delete_branch_for_tag "$TO_DELETE_TAG"

echo "---------"

# Reset last commit
echo -e "üßπ Resetting last commit..."
git_reset_last_commit "soft"

echo "---------"

# Stashing reset changes
echo -e "ü™§ Stashing reverted changes..."
execute_cmd "git stash push -m \"Reset changes for $TO_DELETE_TAG\" -u"

echo "---------"

# We're done(ish)
if [ "$REVERT_DRY_RUN" = true ]; then
  # A list of results
  REVERTED_RESULTS=(
    "ü§∑ Done:"
    " - Closed pull request $LIGHT_BLUE$TO_DELETE_TAG$NOCOLOR (if it existed)."
    " - Deleted the associated branch (if it existed)."
    " - Removed the associated tag (if it existed)."
    " - Deleted local branch for $LIGHT_BLUE$TO_DELETE_TAG$NOCOLOR (if it existed)."
    " - Stashed the reset change for $LIGHT_BLUE$TO_DELETE_TAG$NOCOLOR."
  )

  for message in "${REVERTED_RESULTS[@]}"; do
    echo -e "${CYAN}DRY RUN:$NOCOLOR $message"
  done
fi

echo
echo -e "üëå Done!"
