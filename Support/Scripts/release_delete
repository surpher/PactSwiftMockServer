#!/usr/bin/env bash
# shellcheck disable=SC1091

set -eu

RELEASE_SOURCE_DIR="${BASH_SOURCE[0]%/*}"

# "import"
source "$RELEASE_SOURCE_DIR/utils.sh"
source "$RELEASE_SOURCE_DIR/Config/config.sh"

function show_help {
  echo "Deletes the release version of XCFramework with given tag"
  echo
  echo "Usage:"
  echo "  $0 --tag <TAG> [--dry-run]"
  echo
  echo "Options:"
  echo "  -t, --tag           The release tag associated with release"
  echo "  -r, --release       The release version associated with release"
  echo "      --dry-run       Prints the commands that would have been executed without reverting the release"
  echo "  -h, --help          Prints this message"
  exit 0
}

# Check if we can even do it...
is_tool_installed gh "See https://cli.github.com/ for more information..."

# Parameters
REVERT_DRY_RUN=${REVERT_DRY_RUN:-false}
TO_DELETE_BRANCH=
TO_DELETE_PR_NUMBER=
TO_DELETE_TAG=

# Scirpt inputs
while [[ $# -gt 0 ]]; do
  case "$1" in
    -t|--tag|-r|--release)
      TO_DELETE_TAG=$2
      shift 2
      ;;
    --dry-run)
      REVERT_DRY_RUN=true
      shift
      ;;
    -h|--help)
      show_help
      ;;
    *)
      echo "Invalid option: $1" >&2
      show_help
      ;;
  esac
done

##########################
# Utility funcs
##########################

# Execute command depending on dry run option
function execute_cmd {
  local is_dry_run=$REVERT_DRY_RUN
  if [ "$is_dry_run" = true ]; then
    echo -e "${CYAN}DRY RUN:$NOCOLOR $*"
  else
    executeCommand "$@"
  fi
}

# Close the pull request and delete the associated branch
function github_delete_release_version {
  local tag_to_delete="$1"
  execute_cmd "gh release delete $tag_to_delete --cleanup-tag --yes --repo $REPO_OWNER/$RELEASE_REPO_NAME"
}

# Close the pull request and delete the associated branch
function close_pr_for_version {
  local version_number="$1"
  local pr_number=
  local gh_search_pr=
  local pact_swift_mock_server_repo=$XCPRODUCT_NAME

  gh_search_pr="gh search prs --match title \"$version_number\" --repo \"$REPO_OWNER/$pact_swift_mock_server_repo\" --jq '.[].number' --json number"
  echo -e "ðŸ¤– Executing:"
  echo -e "   $gh_search_pr"

  pr_number=$(eval "$gh_search_pr")
  execute_cmd "gh pr close $pr_number --repo $REPO_OWNER/$pact_swift_mock_server_repo"
}

function is_branch_in_local {
  local branch=$1
  local existed_in_local=
  existed_in_local=$(git branch --list "${branch}")$(git branch --list "${branch}")

  if [[ -z ${existed_in_local} ]]; then
      echo "Branch does not exist locally."
      return 0
  else
      echo "Branch exists locally."
      return 1
  fi
}

# Remove local branch
function delete_local_branch {
  local local_branch="$1"

  echo -e "Deleting local branch $YELLOW$local_branch$NOCOLOR"

  if is_branch_in_local "$local_branch"; then
    execute_cmd "git branch -d $local_branch"

    if [ $? -ne 0 ]; then
        git branch -D "$local_branch"
        if [ $? -ne 0 ]; then
            echo -e "${YELLOW}Failed to delete local branch '$local_branch'$NOCOLOR"
        fi
        if [ "$REVERT_DRY_RUN" = true ]; then
          echo -e "${CYAN}DRY RUN:$NOCOLOR $LIGHT_BLUE$local_branch would be force deleted$NOCOLOR"
        else
          echo "Branch '$local_branch' deleted"
        fi
    fi
  else
      echo "Branch '$local_branch' does not exist..."
  fi
}

# Remove the tag
# Tag on PactSwiftServer does not exist until PR is merged and GHA tags the release commit.
function remove_asssociated_tags {
  local tag_to_delete="$1"

  echo -e "ðŸš® Removing tags..."

  local remote_tags
  remote_tags=$(git ls-remote --tags origin | grep -q "refs/tags/$tag_to_delete")
  local local_tags
  local_tags=$(git tag --list | grep "$tag_to_delete")

  if [[ -n "$remote_tags" ]]; then
    echo -e "  remote tags: $YELLOW$remote_tags$NOCOLOR"
    echo -e "Tag $YELLOW$tag_to_delete$NOCOLOR exists on origin. Deleting..."
    execute_cmd "git push --delete origin $tag_to_delete"

    if [ "$REVERT_DRY_RUN" = true ]; then
      echo -e "${CYAN}DRY RUN:$NOCOLOR Tag $LIGHT_BLUE$tag would be deleted on origin$NOCOLOR"
    else
      echo "Deleted tag '$tag' at origin"
    fi
  else
    echo -e "Tag $YELLOW$tag_to_delete$NOCOLOR not found on origin"
  fi

  if [[ -n "$local_tags" ]]; then
    echo -e "  local tags: $YELLOW$local_tags$NOCOLOR"
    for tag in $local_tags; do
      execute_cmd "git tag -d \"$tag\""
      if [ $? -ne 0 ]; then
        die "Failed to delete tag '$tag'."
      fi
      if [ "$REVERT_DRY_RUN" = true ]; then
        echo -e "${CYAN}DRY RUN:$NOCOLOR Tag $LIGHT_BLUE$tag would be deleted$NOCOLOR"
      else
        echo "Deleted tag '$tag'"
      fi
    done
  else
      echo "No tags found matching '#$tag_to_delete'"
  fi
}

# Reset the last commit here to revert the updated CHANGELOG
function git_reset_last_commit {
  local reset_type="hard"
  local value=$1

  if [[ "$value" == "soft" ]]; then
      reset_type="soft"
  elif [[ "$value" == "hard" ]]; then
      reset_type="hard"
  else
      die "Invalid value. Use either 'soft' or 'hard'."
  fi

  execute_cmd "git reset --$reset_type HEAD~1"
}

###################
# Script execution
###################

# Deleting the release
{
  echo -e "Deleting release $YELLOW$TO_DELETE_TAG$NOCOLOR..."
  github_delete_release_version "$TO_DELETE_TAG"
}

# Closing the pull request
{
  TO_DELETE_PR_NUMBER=$(get_pr_number "$TO_DELETE_TAG")
  echo -e "ðŸ§¯ Closing pull request $LIGHT_BLUE#$TO_DELETE_PR_NUMBER$NOCOLOR..."
  close_pr_for_version "$TO_DELETE_PR_NUMBER"
}

{
  # Removing tags
  echo -e "ðŸ§¯ Removing tags associated with $YELLOW$TO_DELETE_TAG$NOCOLOR..."
  remove_asssociated_tags "$TO_DELETE_TAG"

  # Deleting local branch
  echo -e "ðŸ§¹ Deleting branch associated with ${YELLOW}pr/$TO_DELETE_TAG$NOCOLOR..."
  delete_local_branch "pr/$TO_DELETE_TAG"

  # Reset last commit
  echo -e "ðŸ§¹ Resetting last commit..."
  git_reset_last_commit "soft"

  # Stashing reset changes
  echo -e "ðŸª¤ Stashing reverted changes..."
  execute_cmd "git stash push -m \"Reset changes for $TO_DELETE_TAG\" -u"
}

# We're done(ish)
if [ "$REVERT_DRY_RUN" = true ]; then
  # A list of results
  REVERTED_RESULTS=(
    "ðŸ¤· Done:"
    "  - closed pull request $LIGHT_BLUE#$TO_DELETE_PR_NUMBER$NOCOLOR,"
    "  - deleted the associated branch,"
    "  - removed any associated tags,"
    "  - deleted local branch $LIGHT_BLUE$TO_DELETE_BRANCH$NOCOLOR."
  )

  for message in "${REVERTED_RESULTS[@]}"; do
    echo -e "${CYAN}DRY RUN:$NOCOLOR $message"
  done
fi
