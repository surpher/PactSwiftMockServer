#!/usr/bin/env bash

#  PactSwiftMockService
#
#  Created by Marko Justinek on 19/8/21.
#  Copyright © 2021 Marko Justinek. All rights reserved.
#  Permission to use, copy, modify, and/or distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
#  SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
#  IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

set -euo pipefail

# ### Pre-requisites:
#
# `pact-reference` repo and `PactSwiftMockServer` repo are on the same folder level.
# Use the release tag for libpact_ffi-vX.X.X found at https://github.com/pact-foundation/pact-reference/releases
#
# ### Usage:
# ./Support/build_rust_dependencies libpact_ffi-v0.0.3
#
# In order to minimise the built binary size update $LIBPACT_FFI_DI/Cargo.toml and append the following:
#
# [lib]
# crate-type = ["staticlib"]
#
# [profile.release]
# opt-level = 'z'
# lto = true
# panic = 'abort'
#
#######################

WORKSPACE=${GITHUB_WORKSPACE:-$PWD}
LIBPACT_FFI_DIR="${WORKSPACE}/../pact-reference/rust/pact_ffi"
LIBPACT_FFI_VERSION=$(awk 'NR==1 {print; exit}' libpact_ffi.version)
CI=${CI:-"false"}
PACT_FOUNDATION_REPO="https://github.com/pact-foundation/pact-reference.git"

#######################
# Pre-requisite       #
#######################

# Check whether this script is being run in the right folder
if [ ! -d "$PWD/PactSwiftMockServer.xcodeproj" ]
then
	echo "🚨  Run this from the same folder where your 'PactSwiftMockServer.xcodeproj' lives."
	echo "⚠️  You are runing it in $PWD"
	exit 1
fi

#######################
# If CI               #
#######################

echo "👮‍♀️  Verifying project and dependencies' folder setup..."

if [[ "$CI" == true ]]; then
	# Move a level up
	cd ..

	# Clone the pact-foundation/pact-reference repo
	echo "ℹ️ Cloning ${PACT_FOUNDATION_REPO} at tag: ${LIBPACT_FFI_VERSION}"
	git clone --depth 1 -b $LIBPACT_FFI_VERSION $PACT_FOUNDATION_REPO

elif [ ! -d "$PWD/../pact-reference" ]; then
	echo "🚨  Missing pact-foundation/pact-reference repo."
	echo "⚠️  Make sure you 'git clone ${PACT_FOUNDATION_REPO}' at the same folder level as your PactSwiftMockServer."
	exit 1
else
	echo "👍  Project setup seems to be in order."
fi

echo "ℹ️  Changing location to ${LIBPACT_FFI_DIR}"
cd $LIBPACT_FFI_DIR

if [[ "$CI" == false ]]; then
	git fetch
	git pull
fi

echo "ℹ️  Preparing to build ${LIBPACT_FFI_VERSION}"

#######################
# Setup               #
#######################

# Validate dependencies

echo "👮‍♀️  Checking if Rust is installed..."
if which cargo >/dev/null; then
	echo "👍  cargo installed"
elif command -v ~/.cargo/bin/cargo &> /dev/null; then
	echo "👍  cargo installed in ~/.cargo/bin/"
else
	echo "🚨  Rust/Cargo not installed"
	echo "ERROR: cargo is required and is was found on this machine.\nInstall Rust using either homebrew or follow instructions at https://www.rust-lang.org/tools/install"
 	exit 1
fi

if [[ "$CI" == false ]]; then
	# Set the nightly toolchain
	sh Support/prepare_rust_tools
fi

# Add all the required triples
rustup target add \
	x86_64-apple-ios \
	aarch64-apple-ios \
	x86_64-apple-darwin \
	aarch64-apple-darwin

# Add the nightly toolchain for aarch64-apple-ios-sim (while aarch64-apple-ios-sim is still Tier 3)
rustup component add rust-src --toolchain nightly-x86_64-apple-darwin

##############################################
# Build libpact_ffi binaries                 #
##############################################

echo "🏗  Building libpact_ffi.a for x86_64 iOS Simulator"
echo "cargo build --target=x86_64-apple-ios --release"
cargo build --target=x86_64-apple-ios --release

echo "🏗  Building libpact_ffi.a for arm64 iOS Simulator"
cargo +nightly build -Z build-std --target aarch64-apple-ios-sim --release

echo "🏗  Building libpact_ffi.a for arm64 iOS device"
echo "cargo build --target=aarch64-apple-ios --release"
cargo build --target=aarch64-apple-ios --release

echo "🏗  Building libpact_ffi.a for x86_64 Darwin"
echo "cargo build --target=x86_64-apple-darwin --release"
cargo build --target=x86_64-apple-darwin --release

echo "🏗  Building libpact_ffi.a for arm64 Darwin"
echo "cargo build --target=aarch64-apple-darwin --release"
cargo build --target=aarch64-apple-darwin --release

echo "✅  libpact_ffi.a binaries built"

#######################
# Pact Mock Server    #
#######################

# Copy the compiled binaries into PactSwiftMockServer project
echo "🏗  Copying binaries to ${WORKSPACE}"

# Copy binary for an iOS device
echo "🚚  Copying arm64-ios (iOS device) binary..."
cp ../target/aarch64-apple-ios/release/libpact_ffi.a $WORKSPACE/Resources/iOS-device/libpact_ffi.a
echo "👍  Copied arm64-ios binary."

echo "🚚  Creating a fat binary for iOS Simulator (x86_64 and arm64)..."
lipo -create \
	../target/x86_64-apple-ios/release/libpact_ffi.a \
	../target/aarch64-apple-ios-sim/release/libpact_ffi.a \
	-output $WORKSPACE/Resources/iOS-simulator/libpact_ffi.a
echo "👍  Copied x86_64-ios and arm64-ios-sim fattie."

# Create a fat darwin binary and drop it in PactSwiftMockServer project
echo "🚚  Copying x86_64-darwin and arm64-darwin into a fat binary..."
lipo -create \
	../target/x86_64-apple-darwin/release/libpact_ffi.a \
	../target/aarch64-apple-darwin/release/libpact_ffi.a \
	-output $WORKSPACE/Resources/x86_64-darwin/libpact_ffi.a
echo "👍  Copied x86_64-darwin and arm64-darwin fattie."

#######################
# Cleanup             #
#######################

echo "🎉  All done!"
